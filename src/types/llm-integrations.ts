import { McpTool } from './mcp-services';
import { McpServerConfig } from './panel';

/**
 * A function call generated by the model..
 */
export interface FunctionCall {
  /**
   * The name of the tool to call.
   */
  name: string;
  /**
   * The arguments to call the function with, as generated by the model in JSON format.
   *
   * Note that the model does not always generate valid JSON, and may hallucinate
   * parameters not defined by your function schema. Validate the arguments in
   * your code before calling your function.
   */
  arguments: string;
}

/**
 * A tool call the model may generate.
 */
interface ToolCall {
  /**
   * Id
   */
  id: string;

  /**
   * Index
   */
  index?: number;

  /**
   * type
   */
  type: 'function';

  /**
   * Function call
   */
  function: FunctionCall;
}

/**
 * LLM Role
 */
export enum LlmRole {
  SYSTEM = 'system',
  USER = 'user',
  ASSISTANT = 'assistant',
  TOOL = 'tool',
}

/**
 * Chat message for LLM API
 */
export interface LlmMessage {
  /**
   * Message role
   *
   * @type {LlmRole}
   */
  role: LlmRole;

  /**
   * Message content
   *
   * @type {string}
   */
  content: string | null;

  /**
   * Tool call ID for tool messages
   *
   * @type {string}
   */
  toolCallId?: string;

  /**
   * Add tool_calls for assistant messages
   */
  toolCalls?: ToolCall[];
}

/**
 * MCP + LLM Integration Return interface
 */
export interface McpLlmIntegration {
  /**
   * Send message with MCP tools support
   */
  sendMessageWithTools: (
    messages: LlmMessage[],
    onToolResult?: (toolCallId: string, content: string, isError?: boolean) => void,
    mcpServers?: McpServerConfig[],
    useDefaultGrafanaMcp?: boolean
  ) => Promise<string>;

  /**
   * Check if MCP + LLM integration is available
   */
  checkAvailability: () => Promise<{ isAvailable: boolean; error?: string }>;

  /**
   * Get available tools from MCP servers
   */
  getAvailableTools: (mcpServers?: McpServerConfig[], useDefaultGrafanaMcp?: boolean) => Promise<McpTool[]>;

  /**
   * Clear MCP cache and force reconnection to servers
   */
  clearMcpCache: () => void;
}
